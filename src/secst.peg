 {
        function* flattenContent(content) {
            if(Array.isArray(content)) {
                for(const item of content) {
                    if(Array.isArray(item)) {
                        for(const flat of flattenContent(item)) {
                            yield flat;
                        }
                    } else if(item!==undefined) {
                        if(item?.content) {
                            item.content = [...flattenContent(item.content)].reduce((array,item,i) => {
                                if(typeof(item)==="string" && typeof(array[i-1])==="string") {
                                    array[i-1] += item;
                                } else {
                                    array.push(item);
                                }
                                return array;
                            },[]);
                        }
                        yield item;
                    }
                }
            }
            return content;
        }
        var Tag = options.Tag;
        var JSON5 = options.JSON5;
    }
    start
        = _ content:content* _ {
                return [...flattenContent(content)];
            }

    content
        = mhr / italic / bold / struck / mark / backtickquoted / escape / script / code /  value / hr / br / emoji / (&colon expression _?) / [ a-z0-9_\-~!@#$%^&*()_+=\[\{\]\}|\\;:"'<,>.?/\n\r\t]i

    colon
        = ":"

    expression
        = &colon tag:tag options:options?  bracketed_SECST:bracketed_SECST  {
             const content = bracketed_SECST || [];
             return new Tag({tag,options,content,location:location()});
        }

    hr
     = ":hr" options:options? bracketed_SECST:bracketed_SECST? {
        return new Tag({tag:"hr",options,location:location()})
     }

    br
      = ":br" options:options? bracketed_SECST:bracketed_SECST? {
         return new Tag({tag:"br",options,location:location()})
      }

    value
        = ":value" options:options?  bracketed:bracketed?  {
             const content = bracketed ? [`${bracketed.substring(1,bracketed.length-1)}`] : [];
             return new Tag({tag:"value",options,content,location:location()});
        }

    escape
            = ":escape" options:options? bracketed:bracketed {
                 const content = [`${bracketed.substring(1,bracketed.length-1)}`] ;
                 return new Tag({tag:"escape",options,content,location:location()});
            }

    script
        = ":script" options:options? bracketed:bracketed {
              const content = [`${bracketed.substring(1,bracketed.length-1)}`] ;
             return new Tag({tag:"script",options,content,location:location()});
        }

    code
        = ":code" options:options? bracketed:bracketed {
              const content = [`${bracketed.substring(1,bracketed.length-1)}`] ;
             return new Tag({tag:"code",options,content,location:location()});
        }

    symbol
        = ampersand special:[\#a-z0-9]i* ";" {;
            return new Tag({tag:"&",content:[special.join("")],location:location()})
        }

    ampersand
        = "&"

    emoji
        = colon first:[a-z] rest:[a-z0-9]i* colon {
            return new Tag({tag:"emoji",content:[first+rest.join("")]})
        }

    hashtag
        = hash tag:[a-z0-9\-]i* options:options? content:bracketed_SECST {
            return new Tag({tag:"hashtag",options,content:tag.length>0 ? [tag.join("")] : content,location:location()})
        }

    hash
        = "#"

    mention
        = at site:[a-z0-9]i* options:options? content:bracketed_SECST {
            return new Tag({tag:"@"+site.join(""),options,content,location:location()});
        }

    at
        = "@"

    bracketed_SECST
        = BRACKETOPEN value:(mhr/italic/bold/struck/mark/backtickquoted/symbol/hashtag/mention/escape/script/code/value/hr/br/emoji/expression/not_bracketed/bracketed_SECST)* BRACKETCLOSE {
            if(Array.isArray(value) && value.every((item) => typeof(item)==="string")) {
                return [value.join("")];
            }
            const result = [];
            for(let i=0;i<value.length;i++) {
                const item = value[i];
                if(Array.isArray(item)) {
                    const text = "[" + item.join(" ") + "]";
                    if(typeof(result[result.length-1])!=="string") {
                        result.push(text);
                    } else {
                         result[result.length-1] += text;
                    }
                } else if(item && typeof(item)==="object") {
                    result.push(item);
                } else {
                    const prevtype = typeof(result[result.length-1]);
                    if(prevtype==="string" && typeof(item)==="string") {
                        result[result.length-1] += item;
                    } else {
                        result.push(item);
                    }
                }
            }
            return result;
        }

    bracketed
        = BRACKETOPEN value:(not_bracketed/bracketed)* BRACKETCLOSE {
            return "[" + value.join("") + "]"
        }

    not_bracketed
        = not:(!BRACKETCLOSE !BRACKETOPEN.) {
                return not.join("");
        }

    BRACKETOPEN = '['

    BRACKETCLOSE = ']'

    braced
        = BRACEOPEN value:(not_braced/braced)* BRACECLOSE {
            return "{" + value.join("") + "}"
        }

    not_braced
        = not:(!BRACECLOSE !BRACEOPEN.) {
                return not.join("");
        }

    BRACEOPEN = '{'

    BRACECLOSE = '}'

     bold
            = start:BOLDOPEN value:(not_bold/bold)* end:BOLDCLOSE {
                return new Tag({tag:"b",content:[start+value.join("")+end]})
            }

    not_bold
        = not:(!BOLDCLOSE !BOLDOPEN.) {
                return not.join("");
        }

    BOLDOPEN
        = '**' char:[^* \t\r\n] {
            return char
        }

    BOLDCLOSE
        = char:[^* \t\r\n] '**' {
            return char
        }

    italic
        = start:ITALICOPEN value:(not_italic/italic)* end:ITALICCLOSE {
            return new Tag({tag:"i",content:[start+value.join("")+end]})
        }

    not_italic
        = not:(!ITALICCLOSE !ITALICOPEN.) {
                return not.join("");
        }

    ITALICOPEN
        = '*' char:[^* \t\r\n] {
            return char
        }

    ITALICCLOSE
        = char:[^* \t\r\n] '*' {
            return char
        }

    struck
        = start:STRUCKOPEN value:(not_struck/struck)* end:STRUCKCLOSE {
            return new Tag({tag:"strike",content:[start+value.join("")+end]})
        }

    not_struck
        = not:(!STRUCKCLOSE !STRUCKOPEN.) {
                return not.join("");
        }

    STRUCKOPEN
        = '~~' char:[^~ \t\r\n] {
            return char
        }

   STRUCKCLOSE
        = char:[^~ \t\r\n] '~~' {
            return char
        }

   mark
       = start:MARKOPEN value:(not_mark/mark)* end:MARKCLOSE {
           return new Tag({tag:"mark",content:[start+value.join("")+end]})
       }

   not_mark
       = not:(!MARKCLOSE !MARKOPEN.) {
               return not.join("");
       }

   MARKOPEN
       = '==' char:[^= \t\r\n] {
           return char
       }

   MARKCLOSE
       = char:[^= \t\r\n] '==' {
           return char
       }

    mhr
        = [\r\n] [ \t]* '***' [ \t]* [\r\n] {
            return new Tag({tag:"hr",content:[]})
        }

    backtickquoted
            = BACKTICKOPEN text:(not_backtickquoted/backtickquoted)*  BACKTICKCLOSE {
                 return new Tag({tag:"code",content:[text.join("")]})
            }

        not_backtickquoted
            = not:(!BACKTICKOPEN !BACKTICKOPEN.) { return not.join("");}

        BACKTICKOPEN = '`'

        BACKTICKCLOSE = '`'

    tag
        = colon token:token { return token }

    options
        = "(" _ id:id? _ classList:class*  _ binaryAttributes:binaryattribute* _ attributes:braced? _ ")" {
            var o = {};
            o.id=id;
            o.classList = classList;
            try {
                o.attributes = JSON5.parse(attributes) || {};
            } catch(e) {
                error("Unable to parse attributes. Check for missing commas or quotes.")
            }
            binaryAttributes.forEach(([key,value]) => {
                   o.attributes[key] = value;
            });
            return o;
        }

    id
        = "#" token:token { return token }

    class
        = "." cls:classname { return cls }

    classname
        = start:[_a-z\-]i rest:[_a-z0-9\-]i* { return start + rest.join("") }

    binaryattribute
        = attr:(_ hidden _ / _ checked _ / _ grayscale _ / _ greyscale _ / _ disabled _ / _ editable _ / _ fitcontent _ / _ literal _ / _ open _ / _ plaintext _ / _ readonly _ / _ reversed _ / _ run _ / _ selected _ / _ static _ / _ toggle _ / _ url _ / _ visible _) { return attr[1] }

    hidden
        = "hidden" { return ["hidden",""] }

    checked
        = "checked" { return ["checked",""] }

    grayscale
            = "grayscale" { return ["grayscale",""] }

    greyscale
                = "greyscale" { return ["greyscale",""] }

    editable
        = "editable" { return ["editable",""] }

    disabled
        = "disabled" { return ["disabled",""] }

    fitcontent
        = "fitcontent" { return ["fitcontent",""] }

    literal
        = "literal" { return ["literal",""] }

     plaintext
            = "plaintext" { return ["plaintext",""] }

    readonly
        = "readonly" { return ["readonly",""] }

    reversed
        = "reversed" { return ["reversed",""] }

    run
        = "run" { return ["run",""] }

    open
        = "open" { return ["open",""] }

    selected
        = "selected" { return ["selected",""] }

    static
        = "static" { return ["static",""] }

    toggle
        = "toggle" { return ["toggle",""] }

    url
        = prefix:urlprefix path:[a-z0-9_\-~`!@#$%^&*_+=\{\}\[\]|\\:;'<,>.?/]i* {
            if(prefix.startsWith(".#")) {
                return ["url","#"+path.join("")]
            }
            try {
                new URL(path.join(),document.baseURI);
                return ["url",prefix+path.join("")];
            } catch(e) {
                error(e+"")
            }
        }

    visible
        = "visible" { return ["visible",""] }

    urlprefix
        = "https://" / "./" / ".#"

    token
        = start:[a-z~!$%&*:@#]i rest:[a-z$%&*:@#0-9_\-]i* { return start + rest.join("") }

    quoted
       = [\"] value:string [\"] { return value }

    string
        = value:[ a-z0-9_\-~`!@#$%^&*()_+=\{\}\[\]|\\:;'<,>.?/]i* {
            return value.join("")
        }

    _ "whitespace"
        = whitespace:[ \t\n\r]* { return whitespace.join("") }