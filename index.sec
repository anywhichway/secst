h1[The Joy of SECST]

p[
    abbr[SECST] is a Semantic, Extensible, Computational, Styleable Tagged markup language. You can use it to joyfully
    create compelling, interactive documents backed by HTML.
]

h1(#basic-authoring)[Basic Authoring]

p[
Authors write documents using tags with the format code["<tag>[<content>]"] or code["<tag>(<parameters>)[<content>]"].
]
For example:
ul[
    li[code["strong[bolded important content]"] produces strong[bolded important content]]
    li[code["em[italicized emphasized content]"] produces em[italicized emphasized content]]
]

h2[Semantic Tags With HTML Names]

dl[
    dt[Semantic Tag]
    dd[A tag that has meaning and which is not just used to facilitate document layout]
]


p[
Almost every semantic tag supported by HTML5 is one of the a(href="#tags")[tags supported by SECST]. Most non-semantic tags are excluded from SECST, e.g. code[<div>]
and code[<span>]. The exceptions are ordered and unordered lists or tables.
]

p[
    Sometimes, e.g. with links, you need to specify more than content. This is provided using parameters in parentheses, e.g.

    code["a(./index.txt target='_tab')[SECST]"] yields a(./index.txt target="_tab")[SECST] , where you can access the source of this document.

    Which tags take more than just content is documented in the a(href="#tags")[list of tags].
]

h2[Links]

p[
    For authors, most parameters in parentheses take the form code[<attribute name>="<value>"]. However, for links you can also include a url as shown in a(href="#basic-authoring")[Basic Authoring] above.
]

p[
    By providing ids with headings, e.g. code[h1(#myheading)[My Heading]], you can use them as the targets of links, e.g. code[a(href="#myheading")[Go To My Heading]]

    strong[Note]: All tags can optionally take an id starting with code[#]. If an id is present, it must be the first parameter.
]

h2[Lists]

p[
    Both ordered and unordered lists are supported using code[ol] and code[ul] tags with code[li] tags.

    There is also a shorthand:

    code[
        "ul[
            - LinkedIn
            - Facebook
            - Twitter
        ]"
    ]

    The same shorthand also works for code[ol]. Since SECST already known the list is ordered, numbers are inserted. The main utility of using numbers, is to reset numbering:

    code[
            "ol[
                2. LinkedIn
                - Facebook
                - Twitter
            ]"
        ]

    The standard HTML attributes for setting number style are also supported:


]

h2[Core Semantic Tags Without HTML Names]

p[
These additional non-HTML tags are part of core SECST. They get translated to standard HTML.
]

dl[
    dt[code[toc[Table of Contents Title]]]
    dd[Table of contents are placed at the location of the tag. All content after the tag is analyzed for headings and used for the table. Navigation links are automatically created.]
    dt[code[footnote(#id href="#<some id>")[footnote content]]]
    dd[Footnotes results in a supercase number where they are placed in the document and the content is automatically moved to the end of the document. Numbering is automatic. If you
        want to re-use a footnote, give the first occurence an id. Then, give the subsequent uses a href using the id.
    ]
    dt[code[#[space separated list of hashtags]]]
    dd[You can also use code[#a-hashgtag[]]. em[Note: You must provide trailing  &lsqb;&rsqb; in this alternate form].]
    dt[code[:emoticon-name[]]]
    dd[Emoticons are .... em[Note: You must provide trailing &lsqb;&rsqb;]. You can also use the emoticon tag, code[emoticon(name="emoticon-name")[]].]
]

h2[Non-Core Semantic Tags Without HTML Names]

h3[Social Media Mentions]

p[
Not part of core SECST, but provided in the exemplar implementation are @mentions for several social media platforms. These take the form code["@<platform>[<space separated profile-names>]"].

The supported platforms are:
]

ul[
    - LinkedIn
    - Facebook
    - Twitter
]

h3[Latex]

Latex processing is implemented as part of the exemplar implementation to show how custom elements can be added and used as tags.

code[
    code(language="latex" run)[
        Lift = \frac{1}{2} \rho v^2 S C_L\
    ]
] and code[
          latex[
              Lift = \frac{1}{2} \rho v^2 S C_L\
          ]
      ]

both render as

code(language="latex" run)[
    Lift = \frac{1}{2} \rho v^2 S C_L\
]

h2[Tables of Contents]

h2[Footnotes]

h2[Escaping SECST]

p[
    SECST tagging inside of code[code[]] is automatically escaped, e.g. code[code[strong[text]]]. If you wish to escape it elsewhere, wrap the entire tag expression with double quotes.
]

h1[Basic Computational Authoring]

h1[Styling Content]

h2[Advanced Computational Authoring In Document Programing]

h2[Extending and Meta Document Programming]

h1(#tags)[Tags]

h1[Design Objectives]

Easy to understand, simple syntax, semantic
Easy to learn, limited syntax, semantic
Easy to extend uniform syntax, declarative language elements
Secure
Performant - simple syntax
Small - simple syntax
Configurable - declarative language elements
Comprehensive - all of semantic HTML and more (extendable)
Programmable - simple event handling plus API
Computational - Reactivity built in, advanced math built in, simple user input mechanisms
Styleable - optional capability
Portable - HTML output
SEO Friendly - browser or server rendering

h1[Grammar]

All SECST markup takes one of two forms:

ul[
    li[
        code[<tag>&lsqb;<content>&rsqb;]
    ]
    li[
        code[<tag>(#<id>:optional .<class>... (<unaryattribute> || <attribute>="<value>")...)&lsqb;<content>&rsqb;]
    ]
]


h1[Architecture]

h1[Security]



This is plain text
with a underline[single] line break

This had double

p[This is a simple paragraph]

p(#id1 align="left")[This is a paragraph with strong[strong] content.
   And, a newline with a quoted tag "strong[strong]" and a tag with no space after strong[strong].
]
style(selector="#id1")[
 float:right;
]
listeners(selector="#id1")[
 attributeChanged(event) {
  console.log(event)
 },
 disconnected(event) {
  console.log(event)
 },
 click() { alert("clicked") }
]
ol(type="I")[
 li[item one]
]

hr[]
p[
 value(#v1 visible autosize format="$${value}")[$(#v2) + $(#v3)]
 value(#v2 visible autosize format="$${value}" extract="\$([\d.]*)")[1]
 value(#v3 visible autosize type="currency-usd")[2]
 
 
 value(#v4 visible  src="./sample.json5")[]
 value(#v5 visible src="./sample.json5")[]
]
script[
 (() => { console.log(["foo"]); })();
]